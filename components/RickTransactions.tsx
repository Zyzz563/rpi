'use client';

import { useState, useEffect, useRef } from 'react';
import { FaSortAmountDownAlt, FaSyncAlt, FaFire, FaSkull, FaArrowUp, FaArrowDown, FaArrowRight } from 'react-icons/fa';

type Dimension = {
  id: string;
  name: string; 
  symbol: string;
  danger: number; // –û—Ç 1 –¥–æ 5
  color: string;
};

type Transaction = {
  id: string;
  fromDimension: string;
  toDimension: string;
  amount: number;
  token: string;
  timestamp: number;
  isShady: boolean;
  description: string;
};

// –î–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö
const DIMENSIONS: Dimension[] = [
  { id: 'c137', name: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ C-137', symbol: '‚öõÔ∏è', danger: 5, color: '#5cff32' },
  { id: 'c500a', name: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ C-500A', symbol: 'üåÄ', danger: 3, color: '#36c5f4' },
  { id: 'j1977', name: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ J-1977', symbol: 'üîÆ', danger: 4, color: '#ff36ab' },
  { id: 'fb788', name: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ FB-788', symbol: 'üß™', danger: 2, color: '#f7aa33' },
  { id: 'd716', name: '–ò–∑–º–µ—Ä–µ–Ω–∏–µ D-716', symbol: '‚ö°', danger: 1, color: '#a04ff7' },
  { id: 'k222', name: '–¶–∏—Ç–∞–¥–µ–ª—å –†–∏–∫–æ–≤', symbol: 'üß†', danger: 5, color: '#00b8a3' },
  { id: 'n/a', name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ', symbol: '‚ùì', danger: 5, color: '#ff5252' },
];

// –¢–æ–∫–µ–Ω—ã –∏ –≤–∞–ª—é—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
const TOKENS = [
  'Flurbos', 'Schmeckles', 'BrappleCoin', 'GazorpaCoin', 'BlipsBitz', 'BooBux', 'Gweebos', 'FederationCR'
];

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const generateTransaction = (): Transaction => {
  const dimensions = [...DIMENSIONS];
  const fromIndex = Math.floor(Math.random() * dimensions.length);
  const fromDimension = dimensions[fromIndex].id;
  dimensions.splice(fromIndex, 1);
  
  const toDimension = dimensions[Math.floor(Math.random() * dimensions.length)].id;
  
  const isShady = Math.random() > 0.7;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ç–µ–Ω–µ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const shadyDescriptions = [
    "–û–ø–ª–∞—Ç–∞ –∑–∞ –æ—Ä—É–∂–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è",
    "–ü–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–µ—Ç–∫–æ–π '–°–æ–≤–µ—Ç—É –†–∏–∫–æ–≤ –Ω–µ –∑–Ω–∞—Ç—å'",
    "–ó–∞ –∫–æ–Ω—Ç—Ä–∞–±–∞–Ω–¥—É –º–µ–≥–∞—Å–µ–º—è–Ω",
    "–ü–æ–¥–∫—É–ø –ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏",
    "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
    "–ü–æ–∫—É–ø–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤",
    "–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞",
    "–ó–∞ —É—Å–ª—É–≥–∏ –Ω–∞–µ–º–Ω—ã—Ö —É–±–∏–π—Ü"
  ];
  
  // –û–±—ã—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª–µ–≥–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const normalDescriptions = [
    "–ü–ª–∞—Ç–∞ –∑–∞ –º–µ–∂–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏",
    "–¢–æ—Ä–≥–æ–≤–ª—è —Ä–µ—Å—É—Ä—Å–∞–º–∏",
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ —Å—Ç–∞—Ä—Ç–∞–ø",
    "–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞",
    "–û–ø–ª–∞—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
    "–ú–µ–∂–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
    "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–∞–º–∏"
  ];
  
  return {
    id: `tx-${Math.random().toString(36).substr(2, 9)}`,
    fromDimension,
    toDimension,
    amount: Math.floor(Math.random() * 10000) / 100,
    token: TOKENS[Math.floor(Math.random() * TOKENS.length)],
    timestamp: Date.now(),
    isShady,
    description: isShady 
      ? shadyDescriptions[Math.floor(Math.random() * shadyDescriptions.length)]
      : normalDescriptions[Math.floor(Math.random() * normalDescriptions.length)]
  };
};

type RickTransactionsProps = {
  maxTransactions?: number;
  autoRefresh?: boolean;
  refreshInterval?: number;
  height?: number;
  width?: string;
  showControls?: boolean;
  onSelectTransaction?: (transaction: Transaction) => void;
};

export default function RickTransactions({
  maxTransactions = 10,
  autoRefresh = true,
  refreshInterval = 3000,
  height = 400,
  width = '100%',
  showControls = true,
  onSelectTransaction
}: RickTransactionsProps) {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [sortBy, setSortBy] = useState<'time' | 'amount'>('time');
  const [showShadyOnly, setShowShadyOnly] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);
  const glitchTimerRef = useRef<NodeJS.Timeout | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
  useEffect(() => {
    audioRef.current = new Audio('/portal_transaction.mp3');
    return () => {
      if (audioRef.current) audioRef.current = null;
    };
  }, []);

  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  useEffect(() => {
    const initialTransactions = Array.from({ length: maxTransactions }, () => generateTransaction());
    setTransactions(initialTransactions);
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sortTransactions(initialTransactions, sortBy);
  }, [maxTransactions]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  useEffect(() => {
    if (!autoRefresh || isPaused) return;
    
    const interval = setInterval(() => {
      addNewTransaction();
    }, refreshInterval);
    
    return () => clearInterval(interval);
  }, [autoRefresh, refreshInterval, transactions, sortBy, isPaused]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const sortTransactions = (txs: Transaction[], by: 'time' | 'amount') => {
    if (by === 'time') {
      return [...txs].sort((a, b) => b.timestamp - a.timestamp);
    } else {
      return [...txs].sort((a, b) => b.amount - a.amount);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const addNewTransaction = () => {
    setIsRefreshing(true);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –ø–æ—Ä—Ç–∞–ª–∞
    if (audioRef.current && Math.random() > 0.5) {
      audioRef.current.volume = 0.3;
      audioRef.current.currentTime = 0;
      audioRef.current.play().catch(e => console.error("Failed to play sound:", e));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const newTransaction = generateTransaction();
    setTransactions(prev => {
      const newTxs = [newTransaction, ...prev.slice(0, maxTransactions - 1)];
      return sortTransactions(newTxs, sortBy);
    });
    
    // –ì–ª—é–∫-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if (containerRef.current) {
      containerRef.current.classList.add('glitch-effect');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (glitchTimerRef.current) {
        clearTimeout(glitchTimerRef.current);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      glitchTimerRef.current = setTimeout(() => {
        if (containerRef.current) {
          containerRef.current.classList.remove('glitch-effect');
          setIsRefreshing(false);
        }
      }, 500);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ ID
  const getDimension = (id: string): Dimension => {
    return DIMENSIONS.find(d => d.id === id) || DIMENSIONS[DIMENSIONS.length - 1];
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (timestamp: number): string => {
    const date = new Date(timestamp);
    return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const handleSortChange = () => {
    const newSortBy = sortBy === 'time' ? 'amount' : 'time';
    setSortBy(newSortBy);
    setTransactions(sortTransactions(transactions, newSortBy));
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–Ω–µ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const toggleShadyFilter = () => {
    setShowShadyOnly(!showShadyOnly);
  };

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
  const handleRefresh = () => {
    if (isPaused || isRefreshing) return;
    addNewTransaction();
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã
  const togglePause = () => {
    setIsPaused(!isPaused);
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const filteredTransactions = showShadyOnly 
    ? transactions.filter(tx => tx.isShady)
    : transactions;

  return (
    <div 
      ref={containerRef}
      className="rickified-panel rounded-lg overflow-hidden"
      style={{ width, height: 'auto', maxHeight: height }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—ã */}
      <div className="p-4 bg-[#1d111f] border-b border-[#361052] flex justify-between items-center scan-lines">
        <h3 className="text-[#5cff32] font-mono font-bold portal-glow">–ú–ï–ñ–ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò</h3>
        
        {showControls && (
          <div className="flex space-x-2">
            <button
              onClick={toggleShadyFilter}
              className={`p-2 rounded ${showShadyOnly ? 'bg-[#ff36ab] text-white' : 'bg-[#220833] text-[#ff36ab]'} hover:bg-opacity-80 transition-colors`}
              title={showShadyOnly ? "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ"}
            >
              <FaSkull size={14} />
            </button>
            <button
              onClick={handleSortChange}
              className="p-2 rounded bg-[#220833] text-[#5cff32] hover:bg-opacity-80 transition-colors"
              title={sortBy === 'time' ? "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å—É–º–º–µ" : "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏"}
            >
              <FaSortAmountDownAlt size={14} />
            </button>
            <button
              onClick={togglePause}
              className={`p-2 rounded ${isPaused ? 'bg-[#ff36ab] text-white' : 'bg-[#220833] text-[#5cff32]'} hover:bg-opacity-80 transition-colors`}
              title={isPaused ? "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" : "–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"}
            >
              {isPaused ? '‚ñ∂' : '‚è∏'}
            </button>
            <button
              onClick={handleRefresh}
              className={`p-2 rounded bg-[#220833] text-[#5cff32] hover:bg-opacity-80 transition-colors ${isRefreshing ? 'animate-spin' : ''}`}
              disabled={isPaused || isRefreshing}
              title="–û–±–Ω–æ–≤–∏—Ç—å"
            >
              <FaSyncAlt size={14} />
            </button>
          </div>
        )}
      </div>
      
      {/* –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
      <div 
        className="overflow-y-auto"
        style={{ maxHeight: height - 56 }}
      >
        {filteredTransactions.length === 0 ? (
          <div className="p-6 text-center text-gray-400">
            <p>–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
          </div>
        ) : (
          <div className="divide-y divide-[#361052]">
            {filteredTransactions.map((tx) => {
              const fromDim = getDimension(tx.fromDimension);
              const toDim = getDimension(tx.toDimension);
              
              return (
                <div 
                  key={tx.id}
                  className={`p-4 hover:bg-[#220833] transition-colors flex items-center cursor-pointer ${tx.isShady ? 'bg-[#2d0a1f] bg-opacity-40' : ''}`}
                  onClick={() => onSelectTransaction && onSelectTransaction(tx)}
                >
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö */}
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span 
                        className="text-xl" 
                        style={{ color: fromDim.color }}
                        title={fromDim.name}
                      >
                        {fromDim.symbol}
                      </span>
                      <FaArrowRight className="text-gray-400" />
                      <span 
                        className="text-xl" 
                        style={{ color: toDim.color }}
                        title={toDim.name}
                      >
                        {toDim.symbol}
                      </span>
                      
                      {tx.isShady && (
                        <span className="ml-2 text-[#ff36ab]" title="–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è">
                          <FaSkull size={12} />
                        </span>
                      )}
                    </div>
                    <p className="text-sm text-gray-400 mt-1 truncate max-w-xs">{tx.description}</p>
                  </div>
                  
                  {/* –°—É–º–º–∞ */}
                  <div className="text-right">
                    <p className="text-[#5cff32] font-mono">{tx.amount.toFixed(2)} {tx.token}</p>
                    <p className="text-xs text-gray-500">{formatTime(tx.timestamp)}</p>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
      
      {/* –ñ–∏–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="p-3 bg-[#1d111f] border-t border-[#361052] flex justify-between items-center text-xs">
        <div className="flex items-center text-gray-400">
          <FaFire className="text-[#ff36ab] mr-2" />
          <span>
            {transactions.filter(tx => (Date.now() - tx.timestamp) < 60000).length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
          </span>
        </div>
        <div className="text-gray-400">
          <span className="text-[#5cff32] mr-1">
            {transactions.reduce((sum, tx) => sum + tx.amount, 0).toFixed(2)}
          </span>
          –æ–±—ä–µ–º –≤—Å–µ–≥–æ
        </div>
      </div>
      
      {/* –°—Ç–∏–ª–∏ */}
      <style jsx>{`
        .glitch-effect {
          animation: glitch 0.3s ease;
        }
        
        @keyframes glitch {
          0% {
            transform: translate(0);
            filter: hue-rotate(0deg);
          }
          20% {
            transform: translate(-3px, 2px);
            filter: hue-rotate(90deg);
          }
          40% {
            transform: translate(3px, -2px);
            filter: hue-rotate(180deg);
          }
          60% {
            transform: translate(2px, 3px);
            filter: hue-rotate(270deg);
          }
          80% {
            transform: translate(-2px, -3px);
            filter: hue-rotate(180deg);
          }
          100% {
            transform: translate(0);
            filter: hue-rotate(0deg);
          }
        }
      `}</style>
    </div>
  );
} 